
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             * 
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate. 

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAME

perlboot - Perl 新手 OO 手册

=head1 DESCRIPTION

如果你对面向对象编程不是很熟悉的话，L<perlobj>、L<perltoot> 等文档对你来说阅读起来可能会有些难度。

所以本文档用另外一种方式来讲述 Perl OO。在开始之前，你需要初步掌握 L<perlsub>、L<perlref>、L<perlmod> 等知识。

=head2 假设我们能听懂动物说的话...

首先让动物开口说话：

    sub Cow::speak {
      print "a Cow goes moooo!\n";
    }
    sub Horse::speak {
      print "a Horse goes neigh!\n";
    }
    sub Sheep::speak {
      print "a Sheep goes baaaah!\n";
    }

    Cow::speak;
    Horse::speak;
    Sheep::speak;

上面代码的结果是：

    a Cow goes moooo!
    a Horse goes neigh!
    a Sheep goes baaaah!

上面的代码没什么复杂的，就是一些指明包名的 subroutines。所以我们改写下上面的代码：

    # Cow::speak, Horse::speak, Sheep::speak as before
    @pasture = qw(Cow Cow Horse Sheep Sheep);
    foreach $animal (@pasture) {
      &{$animal."::speak"};
    }

上面代码的结果是：

    a Cow goes moooo!
    a Cow goes moooo!
    a Horse goes neigh!
    a Sheep goes baaaah!
    a Sheep goes baaaah!

哇，那些复杂的符号看起来太复杂了。我们是在 C<no strict refs> 模式下运行的，所以它们是不推荐在大型程序中出现的。

Or is it?

=head2 方法访问符

现在，我们通过 C<< Class->method >> 这种方式来调用 C<Class> 包里的 C<method> 方法。

    # Cow::speak, Horse::speak, Sheep::speak as before
    Cow->speak;
    Horse->speak;
    Sheep->speak;

上面的代码将输出：

    a Cow goes moooo!
    a Horse goes neigh!
    a Sheep goes baaaah!

上面的代码全是常量，不包含变量。请看下面的代码：

    $a = "Cow";
    $a->speak; # invokes Cow->speak

现在便把包名和方法分开了，而且这次我们可以在 C<use strict refs> 下运行了。

=head2 使用方法访问符

让我们之前学到的方法修饰符与一开始的代码合并在一起：

    sub Cow::speak {
      print "a Cow goes moooo!\n";
    }
    sub Horse::speak {
      print "a Horse goes neigh!\n";
    }
    sub Sheep::speak {
      print "a Sheep goes baaaah!\n";
    }

    @pasture = qw(Cow Cow Horse Sheep Sheep);
    foreach $animal (@pasture) {
      $animal->speak;
    }

现在我们能使所有的动物说话，而且使用的是安全的符号链接。

仔细看看我们的代码，我们在每个 C<speak> 方法中都包含 C<print>
方法和要输出的只有细微差别的字符串。如果我们能动态的决定动物们说什么该有多好啊。

当然我们可以通过传递参数来实现。

=head2 方法参数

调用方式为：

    Class->method(@args)

实际上的调用过程如下：

    Class::method("Class", @args);

所以我们可以改写 C<Sheep> speak 方法：

    sub Sheep::speak {
      my $class = shift;
      print "a $class goes baaaah!\n";
    }

另外两只动物的方法也相应的改写为：

    sub Cow::speak {
      my $class = shift;
      print "a $class goes moooo!\n";
    }
    sub Horse::speak {
      my $class = shift;
      print "a $class goes neigh!\n";
    }

C<$class> 会根据不同的调用有着不同的值。但是我们可以更进一步的控制它吗？当然，我们可以在函数中调用其他方法。

=head2 调用另一个方法来简化过程

让我们在 C<speak> 方法中调用另一个 helper 方法 C<sound>。这个方法给出动物发出的声音。

    { package Cow;
      sub sound { "moooo" }
      sub speak {
        my $class = shift;
        print "a $class goes ", $class->sound, "!\n";
      }
    }

现在我们调用 C<< Cow->speak >>，将会首先调用 C<Cow> 类中的 C<speak> 方法，而在C<speak> 方法中会调用 C<<
Cow->sound >> 方法，该方法会返回 Cow 的叫声 C<mooo>。那么 C<Horse> 类该怎么写呢？

    { package Horse;
      sub sound { "neigh" }
      sub speak {
        my $class = shift;
        print "a $class goes ", $class->sound, "!\n";
      }
    }

现在动物之间只有包名和 sound 方法不同。那么我们如何能让它们使用同一个 C<speak> 方法呢？是的，使用继承。

=head2 继承

我们将会定义一个包含共享方法 C<speak> 的类 C<Animal>：

    { package Animal;
      sub speak {
      my $class = shift;
      print "a $class goes ", $class->sound, "!\n";
      }
    }

接下来每个动物便可以继承 C<Animal> 类，同时指定属于自己的声音：

    { package Cow;
      @ISA = qw(Animal);
      sub sound { "moooo" }
    }

我们将会在下一个章节介绍 C<@ISA> (pronounced "is a")。

在调用 C<< Cow->speak >> 的时候发生了什么呢？

首先，Perl 调用 C<Cow::Speak>，但是在 C<Cow> 中找不到 speak 方法，所以 Perl 会检查在 C<@Cow::ISA>
中寻找，并且最终在 C<Animal> 类中找到。

于是，Perl 调用 C<Animal::speak> 方法。

在 C<Animal::speak> 方法中， C<$class> 为 C<Cow>，所以在调用 C<< $class->sound >> 的时候会调用
C<< Cow->sound >> 方法。

=head2 关于 @ISA

在 C<Cow> 中的 C<@ISA> 声明为 C<Animal>。C<@ISA> 是一个数组，不是单独的一个值，这表明我们可以在 Perl OO
中使用多继承。

如果 C<Animal> 中也有 C<@ISA>，那么 Perl 也会继续检查它的父类。这个检查过程是从左到右递归完成的。所以单继承类中的
C<@ISA> 包含一个元素，而多继承类中的 C<@ISA> 包含多个元素，通过 C<@ISA> 我们便构造出了完整的继承状态。

当我们在 C<use strict> 状态下运行时，我们会得到关于 C<@ISA> 的错误。我们可以通过如下方法解决：

最简单的就是连通包名一起指明：

    @Cow::ISA = qw(Animal);

或把它当作全局变量来声明：

    package Cow;
    our @ISA = qw(Animal);

或者我们允许检查时跳过它：

    package Cow;
    use vars qw(@ISA);
    @ISA = qw(Animal);

当然我们也可以用 C<use base> 来指定 C<Cow> 类的父类：

    package Cow;
    use base qw(Animal);

就是这么简单。

=head2 重载方法

现在我们添加 mouse 进来，它的声音很难被听到：

    # Animal package from before
    { package Mouse;
      @ISA = qw(Animal);
      sub sound { "squeak" }
      sub speak {
        my $class = shift;
        print "a $class goes ", $class->sound, "!\n";
        print "[but you can barely hear it!]\n";
      }
    }

    Mouse->speak;

上面的代码结果是：

    a Mouse goes squeak!
    [but you can barely hear it!]

此时，C<Mouse> 有属于它自己的 speak 方法，所以调用 C<< Mouse->speak >> 方法不会直接调用 C<<
Animal->speak >> 方法，而是调用属于自己的该方法。这就是我们所熟知的"重载"。

虽然 C<Mouse> 可以完全不依赖于 C<Animal> 类。但是因为填鸭思想，我们还是让 C<Mouse> 类继承于 C<Animal> 类。

So, let's make C<Mouse> an C<Animal>!

但在 speak 方法中依然调用父类的 speak 方法 C<Animal::speak>：

    # Animal package from before
    { package Mouse;
      @ISA = qw(Animal);
      sub sound { "squeak" }
      sub speak {
        my $class = shift;
        Animal::speak($class);
        print "[but you can barely hear it!]\n";
      }
    }

如果直接调用 C<Animal::speak> 方法而不传递任何参数的话，C<$class> 将为 "animal" 而不是 "mouse"，所以会发出
animal 的声音而不是 mouse 的声音。

所以我们把 C<$class> 做为参数传递给 C<Animal::speak>。

现在 C<Animal::speak> 和 C<Mouse::speak> 方法有些混乱。

The second problem is more subtle: C<Animal> is now hardwired into the
subroutine selection. Let's assume that C<Animal::speak> does exist. What
happens when, at a later time, someone expands the class hierarchy by having
C<Mouse> inherit from C<Mus> instead of C<Animal>. Unless the invocation of
C<Animal::speak> is also changed to an invocation of C<Mus::speak>,
centuries worth of taxonomical classification could be obliterated!

那么有什么解决方法吗？

=head2 从另外的地方开始查找

一个I<更好>的解决方案是告诉 Perl 去哪里查找 C<speak> 方法。

    ClassName->FirstPlaceToLook::method

所以我们可以这样改进 C<Mouse> 类：

    # same Animal as before
    { package Mouse;
      # same @ISA, &sound as before
      sub speak {
        my $class = shift;
        $class->Animal::speak;
        print "[but you can barely hear it!]\n";
      }
    }

这时，我们告诉 Perl 在 C<Animal> 中找到 C<speak> 方法。

但是我们仍然需要手写出 C<Animal> 来，还有更好的方法吗？

=head2 通过 SUPER 方法来实现

如果由 C<SUPER> 来代替 C<Animal> 的话，Perl 就会在 C<@ISA> 中从 C<$ISA[0]> 开始查找 C<speak>
方法。

    # same Animal as before
    { package Mouse;
      # same @ISA, &sound as before
      sub speak {
        my $class = shift;
        $class->SUPER::speak;
        print "[but you can barely hear it!]\n";
      }
    }

C<SUPER::speak> 表示在 C<@ISA> 中查找 C<speak> 方法，它会使用第一个找到的该方法。因为许多语言都把父类加
"I<super>classes"，所以 Perl 就保持了这种习惯。

调用的形式为：

    $class->SUPER::method;

does I<not> look in the C<@ISA> of C<$class> unless C<$class> happens to be
the current package.

=head2 回顾一下

目前为止，我们见过以下语法：

  Class->method(@args);

上面的的代码和下面的代码意义相同：

  $a = "Class";
  $a->method(@args);

调用时传递的参数为：

  ("Class", @args)

调用实质上为：

  Class::method("Class", @args);

如果 C<Class::method> 没有在当前类中找到，Perl 便会在 C<@Class::ISA> 中去递归查找。

有了上面的知识，我们学会了如果去定义类方法、实现继承和多继承、重载方法等。现在我们已经写出了功能初步完全的代码。

但是，对象的数据该怎么处理呢？

=head2 数据绑定

我们先给出 C<Animal> 类和 C<Horse> 类：

  { package Animal;
    sub speak {
      my $class = shift;
      print "a $class goes ", $class->sound, "!\n";
    }
  }
  { package Horse;
    @ISA = qw(Animal);
    sub sound { "neigh" }
  }

此时会调用 C<< Horse->speak >> ，然后是 C<Animal::speak>，然后通过 C<Horse::sound>
得到动物的声音，然后将其输出：

  a Horse goes neigh!

现在我们添加一个新的方法进去，所有的 C<Horse> 都会共享该方法。但是我们该如何为每匹马添加它们的特征呢？比如为每匹马起一个名字，用来区分它们。

也就是说，我们想要给每个 C<Horse> 的实例起一个不同的名字。

在 Perl 中，引用可以指向任何"实例"，所以最简单的方式就是让一个引用指向每一个实例。

  my $name = "Mr. Ed";
  my $horse = \$name;

现在 C<$horse> 是一个指向实例数据的引用。所以现在我们可以把这种方式引入过来，让实例数据与 C<Horse> 通过 C<bless>
操作绑定起来。

  bless $horse, Horse;

现在我们便得到了一个 C<Horse> 类的实例引用，通过它我们便可以访问相应的数据。

=head2 通过实例来调用方法

方法访问符也可以用在实例上，所以我们也可以通过实例来调用方法。

  my $noise = $horse->sound("some", "unnecessary", "args");

这里通过实例 C<$horse> 来调用 C<sound> 方法。

这个过程实际上是在调用：

  my $noise = Horse::sound($horse, "some", "unnecessary", "args");

这里第一个参数仍然是类的实例，而不是类的名称。我们会得到 C<neigh> 叫声作为 C<sound> 的返回值，并且最终存储在 C<$noise>
变量中。

如果 Horse::sound 没有被找到，Perl 便会在 C<@Horse::ISA>
数组中去查找。实例调用与类调用唯一的区别就是传入的第一个参数是实例还是类名称。

=head2 获得实例数据

因为得到了实例引用，我们现在可以相应的获得实例数据。这里，我们添加了一个方法来获得名字：

  { package Horse;
    @ISA = qw(Animal);
    sub sound { "neigh" }
    sub name {
      my $self = shift;
      $$self;
    }
  }

在 C<Horse::name> 中，C<@_> 数组包含：

    ($horse, "some", "unnecessary", "args")

所以 C<shift> 会将 C<$horse> 存储到 C<$self> 中。然后通过解引用得到 C<$self> 指向的数据
C<"Mr. Ed">。

一般我们先通过 C<shift> 把实例变量存储到 C<$self> 中。

然后：

  print $horse->name, " says ", $horse->sound, "\n";

输出：

  Mr. Ed says neigh.

=head2 创建 horse 实例

如果我们手动创建所有的实例，我们肯定会犯很多的错误。幸好我们能通过构建构造方法来方便的构造实例。

  { package Horse;
    @ISA = qw(Animal);
    sub sound { "neigh" }
    sub name {
      my $self = shift;     # instance method, so use $self
      $$self;
    }
    sub named {
      my $class = shift;    # class method, so use $class
      my $name = shift;
      bless \$name, $class;
    }
  }

现在我们可以通过 C<names> 方法来方便的构造 horse 实例：

  my $horse = Horse->named("Mr. Ed");

是的，这里我们又用回了类方法，并且通过 C<bless> 操作把 C<\$name> 与类绑定在在一起。

C<Horse::named> 方法被称作"构造方法"。

我们调用 C<named> 构造方法构建了一个拥有自己名字的 horse 实例。你也可以通过它来构建更多的具有不同名字的 horse
实例。逐渐你会发现很多习惯于把构造方法命名为 C<new>。

=head2 继承构造方法

我们更应该把 C<named> 方法放在 C<Animal> 类中。

  { package Animal;
    sub speak {
      my $class = shift;
      print "a $class goes ", $class->sound, "!\n";
    }
    sub name {
      my $self = shift;
      $$self;
    }
    sub named {
      my $class = shift;
      my $name = shift;
      bless \$name, $class;
    }
  }
  { package Horse;
    @ISA = qw(Animal);
    sub sound { "neigh" }
  }

现在我们调用 C<speak> 方法时会发生什么？

  my $horse = Horse->named("Mr. Ed");
  $horse->speak;

我们得到了一个奇怪的输出：

  a Horse=SCALAR(0xaca42ac) goes neigh!

为什么呢？因为在 C<Animal::speak> 方法中的 $class 为一个引用，所以才会得到如此输出结果。

=head2 使方法在类调用或实例调用时都正确执行

我们所需要的就是对传入的第一个参数做出检测。最常用的就是通过 C<ref> 操作符。如果是实例调用的话，C<ref> 会返回真。反之，则为假。

  sub name {
    my $either = shift;
    ref $either ? $$either : "Any $either";
  }

这里我们用到了 C<?:?> 操作符来判断是实例调用还是类调用。

  my $horse = Horse->named("Mr. Ed");
  print Horse->name, "\n"; # prints "Any Horse\n"
  print $horse->name, "\n"; # prints "Mr Ed.\n"

现在我们来进一步修改 C<speak> 方法：

  sub speak {
    my $either = shift;
    print $either->name, " goes ", $either->sound, "\n";
  }

因为 C<sound> 方法在实例调用或类调用时都能正确执行，所以现在一切都没有问题了。

=head2 为方法传递参数

让我们开始喂养我们的动物：

  { package Animal;
    sub named {
      my $class = shift;
      my $name = shift;
      bless \$name, $class;
    }
    sub name {
      my $either = shift;
      ref $either ? $$either : "Any $either";
    }
    sub speak {
      my $either = shift;
      print $either->name, " goes ", $either->sound, "\n";
    }
    sub eat {
      my $either = shift;
      my $food = shift;
      print $either->name, " eats $food.\n";
    }
  }
  { package Horse;
    @ISA = qw(Animal);
    sub sound { "neigh" }
  }
  { package Sheep;
    @ISA = qw(Animal);
    sub sound { "baaaah" }
  }

在上面代码的基础上试着写如下代码：

  my $horse = Horse->named("Mr. Ed");
  $horse->eat("hay");
  Sheep->eat("grass");

它将输出：

  Mr. Ed eats hay.
  Any Sheep eats grass.

类方法成功的接收了参数并且得到了正确的运行。整个调用过程实际上是：

  Animal::eat($horse, "hay");

=head2 更多有趣的实例

如果一个实例拥有很多的数据，我们该怎么办呢？很多时候我们会把数据存在指向哈希的引用中。

但是我们该如何把我们的 horse 数据存在哈希中呢？

现在看一个例子，我们创建了一个有名字有颜色的 sheep 实例引用：

  my $bad = bless { Name => "Evil", Color => "black" }, Sheep;

此时，C<< $bad->{Name} >> 是 C<Evil>，而且 C<< $bad->{Color} >> 是 C<black>。现在我们想通过
C<< $bad->name >> 来访问它的名字，接下来我们修改一下它。

一种方法就是重载 C<Animal::name> 和 C<Animal::named> 方法。另外一种更好的方法就是我们直接重构
C<Animal::name> 和 C<Animal::named> 方法：

  ## in Animal
  sub name {
    my $either = shift;
    ref $either ? $either->{Name} : "Any $either";
  }
  sub named {
    my $class = shift;
    my $name = shift;
    my $self = { Name => $name };
    bless $self, $class;
  }

当然，我们也需要在 C<Sheep> 类中重载一下 C<named> 方法，用来接受 color 值：

  ## in Sheep
  sub named {
    my ($class, $name) = @_;
    my $self = $class->SUPER::named(@_);
    $$self{Color} = $class->default_color;
    $self
  }

（C<@_> 包含了要传递的所有参数。）

什么是 C<default_color>？我们需要为羊定义默认的颜色。

  ## in Sheep
  sub default_color { "white" }

现在：

  my $sheep = Sheep->named("Bad");
  print $sheep->{Color}, "\n";

输出：

  white

其实不只有 C<Sheep> 类需要颜色数据，所以我们可以在 C<Animal> 类中重构 C<named> 方法：

  ## in Animal
  sub named {
    my ($class, $name) = @_;
    my $self = { Name => $name, Color => $class->default_color };
    bless $self, $class;
  }

现在我们需要为 C<Animal> 类添加 C<default_color> 方法。

  ## in Animal
  sub default_color { "brown" }

因为 C<name> 和 C<named> 是唯一涉及到引用的方法，所以其他的方法完全不需要做任何改变。

=head2 每个实例有不同的颜色

如果所有的马都是棕色的那就很没意思了。所以我们来添加一对方法来存取动物的颜色：

  ## in Animal
  sub color {
    $_[0]->{Color}
  }
  sub set_color {
    $_[0]->{Color} = $_[1];
  }

这里用 C<$_[0]> 而不是通过 C<shift> 把引用存到一个变量中，这会节省一些时间。现在我们可以改写上面的代码：

  my $horse = Horse->named("Mr. Ed");
  $horse->set_color("black-and-white");
  print $horse->name, " is colored ", $horse->color, "\n";

上面的代码结果是：

  Mr. Ed is colored black-and-white

=head2 总结

现在我们学会了定义类方法、构造方法、实例方法、实例数据以及访问器。但是我们还是处于 OO 的初级阶段，我们还没有学会定义完整的访问器、重构、"isa"
和 "can" 测试、C<UNIVERSAL> 类等等。本文档就包含这么多内容，希望你可以已此为基础学习更多的知识。

=head1 另见

L<perlobj>、L<perltoot>、L<perltooc>、L<perlbot>、I<Object Oriented Perl>。

有些模块可能会经常用到
Class::Accessor、Class::Class、Class::Contract、Class::Data::Inheritable、Class::MethodMaker、Tie::SecureHash

=head1 COPYRIGHT

Copyright (c) 1999, 2000 by Randal L. Schwartz and Stonehenge Consulting
Services, Inc.

Copyright (c) 2009 by Michael F. Witten.

Permission is hereby granted to distribute this document intact with the
Perl distribution, and in accordance with the licenses of the Perl
distribution; derived documents must include this copyright notice intact.

Portions of this text have been derived from Perl Training materials
originally appearing in the I<Packages, References, Objects, and Modules>
course taught by instructors for Stonehenge Consulting Services, Inc. and
used with permission.

Portions of this text have been derived from materials originally appearing
in I<Linux Magazine> and used with permission.

=head1 Author

译者：xiaomo(wxm4ever@gmail.com)
