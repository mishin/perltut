
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             * 
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate. 

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAME

perllol - 操作多维数组

=head1 DESCRIPTION

=head2 声明和使用多维数组

创建一个多维数组是非常简单的。后面许多例子都是基于多维数组这个结构的。

一个简单的多维数组可以是 C<$AoA[3][2]> 这样子。下面是它的声明：

    # assign to our array, an array of array references
    @AoA = (
	   [ "fred", "barney" ],
	   [ "george", "jane", "elroy" ],
	   [ "homer", "marge", "bart" ],
    );

    print $AoA[2][2];
  bart

需要注意的是代码最外层的括号。因为你正在对一个数组进行赋值，所以需要括号。如果你需要的I<不是>数组，而是指向它的引用的话，你可以按下面的方式去做：

    # assign a reference to array of array references
    $ref_to_AoA = [
	[ "fred", "barney", "pebbles", "bambam", "dino", ],
	[ "homer", "bart", "marge", "maggie", ],
	[ "george", "jane", "elroy", "judy", ],
    ];

    print $ref_to_AoA->[2][2];

代码最外层的符号现在不是括号了。所以现在可以按下面这种方式访问：

    $AoA[2][2]
    $ref_to_AoA->[2][2]

上面的方式是下面的缩写：

    $AoA[2]->[2]
    $ref_to_AoA->[2]->[2]

你不能省略 $ref_to_AoA 之后的第一个箭头，因为 $ref_to_AoA 是一个引用。

=head2 自定义

上面的章节很好的构建了一个较复杂的数据结构，但是如果我们想要在其中添加一项或者重新创建一个结构该怎么做呢？

假设我们从文件一行一行的读取信息，假设文件的每行是一条信息，每行的每个单词是单独的一项信息。现在构建 @AoA 包含文件内的信息：

    while (<>) {
	@tmp = split;
	push @AoA, [ @tmp ];
    }

你或许会通过一个函数处理数据后返回：

    for $i ( 1 .. 10 ) {
	$AoA[$i] = [ somefunc($i) ];
    }

或者你想把函数的返回结果先存储到一个临时变量中：

    for $i ( 1 .. 10 ) {
	@tmp = somefunc($i);
	$AoA[$i] = [ @tmp ];
    }

需要注意的是要通过 C<[]> 来得到数据的引用，不这样做而通过简单的赋值是错误的：

    $AoA[$i] = @tmp;

这样会因为上下文而将数组 @tmp 的长度存储到变量中。

如果你运行在 C<use strict> 下，你需要添加一些额外的代码使它正确运行：

    use strict;
    my(@AoA, @tmp);
    while (<>) {
	@tmp = split;
	push @AoA, [ @tmp ];
    }

当然，你也可以不用临时变量：

    while (<>) {
	push @AoA, [ split ];
    }

你也可以不用 push() 方法，而是通过直接进行赋值完成：

    my (@AoA, $i, $line);
    for $i ( 0 .. 10 ) {
	$line = <>;
	$AoA[$i] = [ split ' ', $line ];
    }

或者：

    my (@AoA, $i);
    for $i ( 0 .. 10 ) {
	$AoA[$i] = [ split ' ', <> ];
    }

你也可以将这些处理过程封装到一个函数中。这样的话整个过程会变得更加清晰：

    my (@AoA, $i);
    for $i ( 0 .. 10 ) {
	$AoA[$i] = [ split ' ', scalar(<>) ];
    }

如果你是通过引用 $ref_to_AoA 来操作数组的话，那么你将不得不这么做：

    while (<>) {
	push @$ref_to_AoA, [ split ];
    }

现在你已完成了像数组中添加行。那么该如何继续添加列呢？当你在操作矩阵时，下面这么做是很正常的：

    for $x (1 .. 10) {
	for $y (1 .. 10) {
	    $AoA[$x][$y] = func($x, $y);
	}
    }

    for $x ( 3, 7, 9 ) {
	$AoA[$x][20] += func2($x);
    }

不管那些元素之前是否存在，Perl 会为你自动处理好一切。

如果向一个 undef 元素中添加一行数据，你可以这么做：

    # add new columns to an existing row
    push @{ $AoA[0] }, "wilma", "betty";

注意I<不可以>这么做：

    push $AoA[0], "wilma", "betty";  # WRONG!

按上面的方式进行操作的话，编译都无法通过。为什么呢？因为 push() 操作要求第一个参数必须是一个数组。

=head2 使用和输出

现在是时候把你的数据输出了。那么该如何做呢？如果你只是需要其中的一项，那么非常简单：

    print $AoA[0][0];

如果想要全部将它们输出，你却不能这么做：

    print @AoA;		# WRONG

这样做你只能得到相应的引用列表，Perl 不会自动到引用所指向的地方为你取得相应的数据。这个过程你应该自己循环实现。

    for $aref ( @AoA ) {
	print "\t [ @$aref ],\n";
    }

如果你想要通过索引下标的方式处理，你可以这么做：

    for $i ( 0 .. $#AoA ) {
	print "\t elt $i is [ @{$AoA[$i]} ],\n";
    }

或者可以这么做（注意内层循环）：

    for $i ( 0 .. $#AoA ) {
	for $j ( 0 .. $#{$AoA[$i]} ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

正如你所看到的，这个过程变得越来越复杂，这就是为什么有时候使用临时变量会变得更加简单的原因。

    for $i ( 0 .. $#AoA ) {
	$aref = $AoA[$i];
	for $j ( 0 .. $#{$aref} ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

嗯，还是有些恶心。那么这样呢？

    for $i ( 0 .. $#AoA ) {
	$aref = $AoA[$i];
	$n = @$aref - 1;
	for $j ( 0 .. $n ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

=head2 切片

获得一个多维数组的切片，也是非常简单的。

我们将继续使用上面构造好的 @AoA，下面是一个简单的例子。

    @part = ();
    $x = 4;
    for ($y = 7; $y < 13; $y++) {
	push @part, $AoA[$x][$y];
    }

我们可以通过一个切片操作来代替循环：

    @part = @{ $AoA[4] } [ 7..12 ];

但正如你所看到的，这行代码读起来并不是那么容易。

那么，如何可以得到一个 $x 从4到8 $y 从7到12的I<二维切片>：

    @newAoA = ();
    for ($startx = $x = 4; $x <= 8; $x++) {
	for ($starty = $y = 7; $y <= 12; $y++) {
	    $newAoA[$x - $startx][$y - $starty] = $AoA[$x][$y];
	}
    }

当然我们也可以通过切片操作来缩减代码：

    for ($x = 4; $x <= 8; $x++) {
	push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
    }

如果你偏向于 Schwartzian Transforms 的话，你也可以通过 map 操作来实现：

    @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;

如果你的老板因为你写的"高深莫测"的代码而拿工作威胁你，这确实很麻烦。不过我要是你的话，我会把它封装到一个函数名清晰的函数中：

    @newAoA = splice_2D( \@AoA, 4 => 8, 7 => 12 );
    sub splice_2D {
	my $lrr = shift; 	# ref to array of array refs!
	my ($x_lo, $x_hi,
	    $y_lo, $y_hi) = @_;

	return map {
	    [ @{ $lrr->[$_] } [ $y_lo .. $y_hi ] ]
	} $x_lo .. $x_hi;
    }



=head1 另见

L<perldata>，L<perlref>，L<perldsc>

=head1 AUTHOR

Tom Christiansen <F<tchrist@perl.com>>

Last update: Thu Jun 4 16:16:23 MDT 1998

译者：xiaomo(wxm4ever@gmail.com)
